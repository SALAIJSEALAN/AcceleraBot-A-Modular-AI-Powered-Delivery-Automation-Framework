import io
import json
import re
from datetime import datetime, timedelta
from dateutil.parser import parse as dtparse

import pandas as pd
import matplotlib.pyplot as plt
from fpdf import FPDF
import streamlit as st

# --------------------------- App Config ---------------------------
st.set_page_config(page_title="AcceleraBot – AI Delivery Accelerator", layout="wide")
st.title("⚡ AcceleraBot – Intelligent Delivery Accelerator")
st.caption("Reusable agents for triage, onboarding, and reporting")

# --------------------------- Helper Functions ---------------------------
STATUS_DONE = {"done", "closed", "resolved", "complete", "completed"}
STATUS_ACTIVE = {"todo", "open", "in progress", "in-progress", "ongoing", "backlog", "blocked", "pending"}

def classify_task(text: str) -> str:
    t = (text or "").lower()
    rules = [
        ("Bug", r"(bug|error|fail|crash|defect|issue)"),
        ("Feature", r"(feature|add|new|enhancement)"),
        ("Improvement", r"(refactor|optimi[sz]e|improve|cleanup)"),
        ("Security", r"(vuln|xss|sql|injection|breach)"),
        ("Data", r"(etl|pipeline|dataset|schema|report)"),
        ("DevOps", r"(ci/cd|pipeline|docker|kubernetes|deploy)"),
        ("UX", r"(ui|ux|design|layout|accessibility)")
    ]
    for label, pat in rules:
        if re.search(pat, t):
            return label
    return "General"

def suggest_priority(text: str, days_to_due, status: str) -> str:
    t = (text or "").lower()
    score = 0
    if days_to_due is not None:
        if days_to_due < 0: score += 3
        elif days_to_due <= 2: score += 2
        elif days_to_due <= 7: score += 1
    if re.search(r"(payment|prod|production|customer|security|breach)", t): score += 3
    if re.search(r"(blocked|failure|critical|sev ?1|p1)", t): score += 3
    if (status or "").lower() in {"blocked"}: score += 2
    return "High" if score >= 4 else ("Medium" if score >= 2 else "Low")

def simple_summary(df: pd.DataFrame) -> str:
    total = len(df)
    done = int((df["status_norm"].isin(STATUS_DONE)).sum())
    open_ = total - done
    overdue = int((df["overdue"] == True).sum())
    high = int((df["priority"] == "High").sum())
    return f"Total: {total} • Completed: {done} • Open: {open_} • Overdue: {overdue} • High Priority: {high}"

def generate_pdf_report(project_name: str, summary: str, kpis: dict, chart_png: bytes | None) -> bytes:
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, f"AcceleraBot Status Report – {project_name}", ln=True)
    pdf.set_font("Arial", "", 11)
    pdf.multi_cell(0, 8, f"Generated on {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    pdf.ln(2)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 8, "Summary", ln=True)
    pdf.set_font("Arial", "", 11)
    pdf.multi_cell(0, 7, summary)
    pdf.ln(2)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 8, "Key Metrics", ln=True)
    pdf.set_font("Arial", "", 11)
    for k, v in kpis.items():
        pdf.cell(0, 7, f"- {k}: {v}", ln=True)
    if chart_png:
        pdf.ln(4)
        pdf.image(io.BytesIO(chart_png), x=10, y=None, w=180)
    return pdf.output(dest="S").encode("latin-1")

def make_workflow_yaml() -> str:
    return """# Reusable workflow template
version: 1
name: triage-and-report
triggers:
  - type: http
    path: /incidents/new
steps:
  - id: classify
    type: rule-based-intent
  - id: report
    type: generate-report
outputs:
  - type: email
    to: delivery-team@company.com
"""

def make_jira_template_json() -> str:
    template = {
        "projectKey": "ATOS",
        "issueType": "Task",
        "summary": "Reusable Accelerator Task",
        "description": "Generated by AcceleraBot",
        "priority": "Medium",
        "labels": ["accelerator", "reusable"]
    }
    return json.dumps(template, indent=2)

def generate_sample_data() -> pd.DataFrame:
    from random import choice, randint
    today = datetime.today()
    rows = []
    for i in range(1, 51):
        created = today - timedelta(days=randint(1, 20))
        due = created + timedelta(days=randint(1, 15))
        status = choice(["ToDo", "In Progress", "Blocked", "Done"])
        title = choice(["Fix UPI", "Add Feature", "Refactor ETL", "Enable MFA", "Improve Dashboard"])
        desc = choice(["Payment failed", "Onboarding KYC", "Optimize ETL", "Security patch", "UI update"])
        rows.append({"id": i, "title": title, "description": desc, "status": status,
                     "created_at": created, "due_date": due})
    return pd.DataFrame(rows)

def enrich(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    df["status_norm"] = df["status"].str.lower()
    df["days_to_due"] = (df["due_date"] - datetime.now()).dt.days
    df["overdue"] = df["days_to_due"] < 0
    text = df["title"] + " " + df["description"]
    df["type"] = text.apply(classify_task)
    df["priority"] = [suggest_priority(t, d, s) for t,d,s in zip(text, df["days_to_due"], df["status"])]
    return df

# --------------------------- Sidebar ---------------------------
st.sidebar.header("📦 Data & Modules")
use_sample = st.sidebar.checkbox("Use sample dataset", value=True)
uploaded = None if use_sample else st.sidebar.file_uploader("Upload CSV", type=["csv"])
project_name = st.sidebar.text_input("Project Name", value="BFSI Modernization")
run_enrich = st.sidebar.button("Run AcceleraBot")

# Module tabs
tab1, tab2, tab3 = st.tabs(["Incident Triage", "Onboarding Agent", "Reporting Agent"])

# --------------------------- Load Data ---------------------------
if use_sample:
    df_raw = generate_sample_data()
else:
    df_raw = pd.read_csv(uploaded) if uploaded else None

if df_raw is not None:
    # --------------------------- Incident Triage ---------------------------
    with tab1:
        st.subheader("🛠 Incident Triage Demo")
        st.write("This agent classifies issues automatically into categories and suggests priority.")
        df_triage = enrich(df_raw)
        st.dataframe(df_triage[["id","title","description","type","priority"]].head())
    
    # --------------------------- Onboarding / KYC ---------------------------
    with tab2:
        st.subheader("📄 Onboarding Agent Demo")
        st.write("Simulate document/data extraction for onboarding or KYC tasks.")
        st.info("Here we just extract and classify text from sample CSV for demo purposes.")
        st.dataframe(df_triage[["id","title","description","priority"]].head())
    
    # --------------------------- Reporting ---------------------------
    with tab3:
        st.subheader("📊 Reporting Agent")
        st.dataframe(df_triage.head())
        # KPIs
        total, completed = len(df_triage), int((df_triage["status_norm"].isin(STATUS_DONE)).sum())
        open_items, overdue = total - completed, int(df_triage["overdue"].sum())
        high = int((df_triage["priority"]=="High").sum())
        kpi_cols = st.columns(5)
        kpi_cols[0].metric("Total", total)
        kpi_cols[1].metric("Completed", completed)
        kpi_cols[2].metric("Open", open_items)
        kpi_cols[3].metric("Overdue", overdue)
        kpi_cols[4].metric("High Priority", high)
        st.write("**Summary:**", simple_summary(df_triage))

        # Charts
        st.subheader("Status Distribution")
        fig, ax = plt.subplots()
        df_triage["status"].value_counts().plot(kind="barh", ax=ax)
        st.pyplot(fig)

        # Downloads
        csv_bytes = df_triage.to_csv(index=False).encode("utf-8")
        st.download_button("⬇️ Download Enriched CSV", csv_bytes, "enriched.csv", "text/csv")
        st.download_button("⬇️ Download Workflow YAML", make_workflow_yaml(), "workflow.yaml", "text/plain")
        st.download_button("⬇️ Download Jira JSON Template", make_jira_template_json(), "jira_template.json", "application/json")
        buf = io.BytesIO()
        fig.savefig(buf, format="png")
        st.download_button("⬇️ Download PDF Report", generate_pdf_report(project_name, simple_summary(df_triage), 
            {"Total": total,"Completed": completed,"Open": open_items,"Overdue": overdue,"High": high}, buf.getvalue()),
            f"{project_name}_report.pdf", "application/pdf")
else:
    st.info("Upload CSV or use sample dataset to begin.")
